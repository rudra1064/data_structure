#include<iostream>
using namespace std;
class Node{
    public:
    int val;
    Node*prev;
    Node*next;
    Node(int data){
        val=data;
        prev=NULL;
        next=NULL;
    }
};
class DoublyLinkedList{
    public:
    Node*head;
    Node*tail;
    DoublyLinkedList(){
        head=NULL;
        tail=NULL;
            }
    //Insert at head
    void insertathead(int value){
        Node*new_node=new Node(value);
        if(head==NULL){
            head=new_node;
            tail=new_node;
            return;
        }
        head->prev=new_node;
        new_node->next=head;
        head=new_node;
    }  
    //Insert at tail
    void insertattail(int value){
        Node*new_node=new Node(value);
        Node*temp=head;
        if(tail==NULL){
            head=new_node;
            tail=new_node;
            return;
        }
        tail->next=new_node;
        new_node->prev=tail;
        tail=new_node;
    }
    //insert at position
    void insertatposition(int value,int k){
        //asuming k is less than equal to length of linked list
        Node*new_node=new Node(value);
        Node*temp=head;
        int count=1;
        while(count!=k-1){
            temp=temp->next;
            count++;
        }
        new_node->next=temp->next;
        temp->next=new_node;
        new_node->prev=temp;
        temp->next->prev=new_node;
        
    }
    //Traverse
    void traverse(){
        Node*temp=head;
        while(temp!=NULL){
            cout<<temp->val<<"->";
            temp=temp->next;
        }
        cout<<"Null"<<endl;;
    }
    void deleteathead(){
        if(head==NULL){
            return;
        }
        Node*temp=head;
        head=head->next;
        if(head==NULL){       //if have only one node
            tail=NULL;
        }
        else{
        head->prev=NULL;
        }
        free(temp);
    }
    void deleteattail(){
        if(tail==NULL){
            return;
        }
       Node*temp=tail;
       tail=tail->prev;
       if(tail==NULL){
           head=NULL;
       }
       else{
           tail->next=NULL;
       }
       free(temp);
       
    }
    void deleteatposition(int pos){
       int curr_pos=0;
        Node*temp=head;
        while(curr_pos!=pos-1){
            temp=temp->next;
            curr_pos++;
        }
        Node*temp1=temp->next;
        temp->next=temp->next->next;
        temp->next->prev=temp; 
        free(temp1);
    }
    
};
int main(){
  DoublyLinkedList l1;
 l1.insertathead(1);
 l1.traverse();
 l1.insertattail(2);
 l1.insertattail(3);
 l1.insertattail(4);
 l1.insertattail(5);
 l1.insertattail(6);
 l1.traverse();
 l1.insertatposition(10,3);
 l1.traverse(); 
 l1.deleteathead();  
 l1.traverse();  
 l1.deleteattail();
 l1.traverse(); 
 l1.deleteatposition(3);
 l1.traverse(); 
    return 0;
}
